{"version":3,"file":"component---src-templates-portfolio-js-0ff6acca2d45c56f54d0.js","mappings":"8JAmCA,IAjCcA,IAA4C,IAA3C,YAAEC,EAAW,WAAEC,KAAeC,GAAOH,EAkBlD,OACEI,EAAAA,cAAA,OAAKC,UAAU,uBAAuBC,MAlBjB,CACrBC,SAAU,WACVC,SAAU,SACVC,MAAO,OACPC,WAAY,WAeVN,EAAAA,cAAA,UACEO,IAAKV,EACLW,MAAOV,EACPW,MAAM,0EACNC,YAAY,IACZC,sBAAsB,OACtBC,mBAAmB,OACnBC,iBAAe,EACfX,MApBc,CAClBC,SAAU,WACVW,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPZ,MAAO,OACPa,OAAQ,UAeF,C,gHCwCV,MArDcnB,IACZ,MAAM,EAACoB,EAAY,EAACC,IAAkBC,EAAAA,EAAAA,WAAS,GAEzCC,GAlBYC,EAkBKxB,EAAMyB,KAAKD,aAjBhBE,eACPzB,EAAAA,cAAC0B,EAAAA,EAAK,CAAC7B,YAAa0B,EAAYE,iBAC9BF,EAAYI,UAEnB3B,EAAAA,cAAC4B,EAAAA,EAAW,CACVC,MAAON,EAAYI,UAAUG,gBAAgBC,gBAC7C9B,UAAU,aAIPD,EAAAA,cAAAA,EAAAA,SAAA,MAXOuB,MAoBlB,MAAMS,GAAS,GAAGjC,EAAMyB,KAAKD,YAAYf,OAAQyB,QAC7C,gBACA,IAGEC,EACJlC,EAAAA,cAAA,OAAKmC,wBAAyB,CAAEC,OAAQrC,EAAMyB,KAAKa,QAG/CC,EAASnB,EACbnB,EAAAA,cAAA,KAAGuC,KAAI,IAAMP,GACXhC,EAAAA,cAAA,UAAQwC,QAASA,IAAMpB,GAAgBD,GAAclB,UAAU,UAAS,cAK1ED,EAAAA,cAAA,UAAQwC,QAASA,IAAMpB,GAAgBD,GAAclB,UAAU,UAAS,aAO1E,OACED,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,WAASC,UAAU,sCAAsCwC,GAAIT,GAC3DhC,EAAAA,cAAA,OAAKC,UAAU,qBACbD,EAAAA,cAAA,UAAKD,EAAMyB,KAAKD,YAAYf,OAE5BR,EAAAA,cAAA,UAAQC,UAAU,yBACfqB,EACDtB,EAAAA,cAAA,cAAYC,UAAU,gCACnBF,EAAMyB,KAAKD,YAAYmB,aAI5B1C,EAAAA,cAAA,SAAID,EAAMyB,KAAKD,YAAYoB,aAE1BxB,GAAee,EAEfnC,EAAMyB,KAAKoB,SAAWN,IAG3BtC,EAAAA,cAAA,WACC,E,UC1CP,MAhB2BD,IACzB,MAEM8C,EAAO9C,EAAM8C,KACbrC,GAHcsC,EAGK/C,EAAMgD,YAAYvC,OAHXwC,OAAO,GAAGC,cAAgBH,EAAII,MAAM,GAAhDJ,MAIpB,MAAMK,EAAQN,EAAKO,kBAAkBC,MACrC,OACErD,EAAAA,cAACsD,EAAAA,EAAM,CAAC9C,MAAOA,GACbR,EAAAA,cAACuD,EAAAA,EAAG,CAAC/C,MAAOA,IACX2C,EAAMK,KAAI5D,IAAe,IAAd,KAAE4B,GAAM5B,EAClB,OAAOI,EAAAA,cAACyD,EAAI,CAACC,IAAKlC,EAAKmC,OAAOC,KAAMpC,KAAMA,GAAQ,IAE7C,C","sources":["webpack://gatsby-london-after-midnight/./src/components/video.js","webpack://gatsby-london-after-midnight/./src/components/post.js","webpack://gatsby-london-after-midnight/./src/templates/portfolio.js"],"sourcesContent":["import React from \"react\";\n\nconst Video = ({ videoSrcURL, videoTitle, ...props }) => {\n  const containerStyle = {\n    position: \"relative\",\n    overflow: \"hidden\",\n    width: \"100%\",\n    paddingTop: \"56.25%\" /* 16:9 Aspect Ratio (divide 9 by 16 = 0.5625) */,\n  };\n\n  const iFrameStyle = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    width: \"100%\",\n    height: \"100%\",\n  };\n\n  return (\n    <div className=\"embedVideo-container\" style={containerStyle}>\n      <iframe\n        src={videoSrcURL}\n        title={videoTitle}\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        frameBorder=\"0\"\n        webkitallowfullscreen=\"true\"\n        mozallowfullscreen=\"true\"\n        allowFullScreen\n        style={iFrameStyle}\n      />\n    </div>\n  );\n};\nexport default Video;\n","import React, { useState } from \"react\";\nimport Video from \"./video\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\n  const getMedia = (frontmatter) => {\n    if (frontmatter.videoSourceURL) {\n      return <Video videoSrcURL={frontmatter.videoSourceURL} />;\n    } else if (frontmatter.thumbnail) {\n      return (\n        <GatsbyImage \n          image={frontmatter.thumbnail.childImageSharp.gatsbyImageData}\n          className=\"kg-image\"\n        />\n      );\n    } else {\n      return <></>;\n    }\n  };\n\nconst Post = (props) => {\n  const [showContent, setShowContent] = useState(false);\n\n  const media = getMedia(props.node.frontmatter);\n\n  const postId = `${props.node.frontmatter.title}`.replace(\n      /[^a-zA-Z0-9]/g,\n      \"\"\n    );\n\n  const content = (\n    <div dangerouslySetInnerHTML={{ __html: props.node.html }}></div>\n  );\n\n  const button = showContent ? (\n    <a href={`#${postId}`}>\n      <button onClick={() => setShowContent(!showContent)} className=\"button\">\n        Show less\n      </button>\n    </a>\n  ) : (\n    <button onClick={() => setShowContent(!showContent)} className=\"button\">\n      Show more\n    </button>\n  );\n    \n\n\n  return (\n    <>\n      <article className=\"post-content page-template no-image\" id={postId}>\n        <div className=\"post-content-body\">\n          <h2>{props.node.frontmatter.title}</h2>\n\n          <figure className=\"kg-card kg-image-card\">\n            {media}\n            <figcaption className=\"gatsby-resp-image-figcaption\">\n              {props.node.frontmatter.figcaption}\n            </figcaption>\n          </figure>\n\n          <p>{props.node.frontmatter.description}</p>\n\n          {showContent && content}\n\n          {props.node.excerpt && button}\n        </div>\n      </article>\n      <hr />\n    </>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport Post from \"../components/post\";\nimport Seo from \"../components/seo\";\n\nimport \"../style/normalize.css\";\nimport \"../style/all.scss\";\n\nconst PortfolioTemplate = (props) => {\n  const capitalise = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\n  const data = props.data;\n  const title = capitalise(props.pageContext.title);\n  const posts = data.allMarkdownRemark.edges;\n  return (\n    <Layout title={title}>\n      <Seo title={title} />\n      {posts.map(({ node }) => {\n        return <Post key={node.fields.slug} node={node} />;\n      })}\n    </Layout>\n  );\n};\n\nexport default PortfolioTemplate;\n\nexport const indexQuery = graphql`\n  query PortfolioByTopic($regex: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: $regex } }\n      sort: { frontmatter: { date: DESC } }\n    ) {\n      edges {\n        node {\n          excerpt\n          html\n          fields {\n            slug\n          }\n          frontmatter {\n            description\n            title\n            figcaption\n            videoSourceURL\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(\n                  layout: CONSTRAINED\n                  width: 1360\n                  placeholder: BLURRED\n                )\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","videoSrcURL","videoTitle","props","React","className","style","position","overflow","width","paddingTop","src","title","allow","frameBorder","webkitallowfullscreen","mozallowfullscreen","allowFullScreen","top","left","bottom","right","height","showContent","setShowContent","useState","media","frontmatter","node","videoSourceURL","Video","thumbnail","GatsbyImage","image","childImageSharp","gatsbyImageData","postId","replace","content","dangerouslySetInnerHTML","__html","html","button","href","onClick","id","figcaption","description","excerpt","data","str","pageContext","charAt","toUpperCase","slice","posts","allMarkdownRemark","edges","Layout","Seo","map","Post","key","fields","slug"],"sourceRoot":""}